type: edu
custom_name: stage8
files:
- name: src/calculator/Main.kt
  visible: true
  text: |
    package calculator

    fun main() {
        println("Hello, World!")
    }
  learner_created: false
- name: test/Test.java
  visible: false
  text: |
    import calculator.MainKt;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.Arrays;
    import java.util.List;

    public class Test extends StageTest<String> {
        @Override
        public List<TestCase<String>> generate() {
            return Arrays.asList(
                new TestCase<String>().setDynamicTesting(() -> {
                    TestedProgram main = new TestedProgram(MainKt.class);

                    // tests of functionality of previous steps
                    main.start();

                    // test of /help
                    String output = main.execute("/help").trim();
                    if (output.length() < 4) {
                        return CheckResult.wrong(
                            "It seems like there was no any \"help\" message.");
                    }

                    // input empty string
                    output = main.execute("");
                    if (output.length() != 0) {
                        return CheckResult.wrong(
                            "Incorrect response to an empty string. " +
                            "The program should not print anything.");
                    }

                    // testing basic assignment
                    output = main.execute("n = 32");
                    if (output.length() != 0) {
                        return CheckResult.wrong(
                            "Unexpected reaction after assignment." +
                            "The program should not print anything in this case.");
                    }

                    // testing a big amount of numbers
                    output = main.execute("33 + 20 + 11 + 49 - 32 - 9 + 1 - 80 + 4").trim();
                    if (!output.equals("-3")) {
                        return CheckResult.wrong(
                            "The program cannot process addition " +
                            "and subtraction operations correctly.");
                    }

                    // the same with a variable
                    output = main.execute("33 + 20 + 11 + 49 - n - 9 + 1 - 80 + 4").trim();
                    if (!output.equals("-3")) {
                        return CheckResult.wrong(
                            "The program cannot process addition " +
                            "and subtraction operations correctly.");
                    }


                    output = main.execute("c = n \nc = 2");
                    if (output.length() != 0) {
                        return CheckResult.wrong(
                            "Unexpected reaction after assignment." +
                            "The program should not print anything in this case.");
                    }

                    // check value
                    output = main.execute("  c  ").trim();
                    if (!output.equals("2")) {
                        return CheckResult.wrong(
                            "The variable stores not a correct value." +
                            "May be the program could not assign the value " +
                                "of one variable to another one.");
                    }

                    // the sum of the numbers is zero
                    output = main.execute("11 - 13 + c").trim();
                    if (!output.equals("0")) {
                        return CheckResult.wrong(
                            "The problem when sum is equal to 0 has occurred.");
                    }

                    // test of multiple operations
                    output = main.execute("5 --- 2 ++++++ 4 -- 2 ---- 1").trim();
                    if (!output.equals("10")) {
                        return CheckResult.wrong(
                            "The program cannot process " +
                            "multiple operations with several operators.");
                    }

                    // test of a nonexistent command
                    output = main.execute("/start").trim().toLowerCase();
                    if (!output.startsWith("unknown")) {
                        return CheckResult.wrong(
                            "The program should print \"Unknown command\" " +
                            "when a nonexistent command is entered.");
                    }

                    // testing invalid variable name
                    output = main.execute("var1 = 1").trim().toLowerCase();
                    if (!output.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "The name of variable should contain only Latin letters.");
                    }

                    // testing invalid value
                    output = main.execute("var = 2a").trim().toLowerCase();
                    if (!output.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "The value can be an integer number or a value of another variable");
                    }

                    // testing multiple equalization
                    output = main.execute("c = 7 - 1 = 5").trim().toLowerCase();
                    if (!output.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "The program could not handle a invalid assignment.");
                    }

                    // testing assignment by unassigned variable
                    output = main.execute("variable = f").trim().toLowerCase();
                    if (!(output.startsWith("unknown") || output.startsWith("invalid"))) {
                        return CheckResult.wrong(
                            "The program should not allow an assignment by unassigned variable.");
                    }

                    // checking case sensitivity
                    main.execute("variable = 777");
                    output = main.execute("Variable").trim().toLowerCase();
                    if (!output.startsWith("unknown")) {
                        return CheckResult.wrong("The program should be case sensitive.");
                    }

                    // checking case sensitivity
                    main.execute("variable = 777");
                    output = main.execute("Variable").trim().toLowerCase();
                    if (!output.startsWith("unknown")) {
                        return CheckResult.wrong("The program should be case sensitive.");
                    }

                    // test of /exit
                    output = main.execute("/exit").trim().toLowerCase();
                    if (!output.startsWith("bye")) {
                        return CheckResult.wrong(
                            "Your program didn't print \"bye\" after entering \"/exit\".");
                    }

                    return new CheckResult(main.isFinished(),
                        "Your program should exit after entering \"/exit\".");
                }),

                new TestCase<String>().setDynamicTesting(() -> {
                    TestedProgram main = new TestedProgram(MainKt.class);

                    // A test suit for multiplication and division
                    main.start();

                    String output = main.execute("4 * 3").trim();
                    if (!output.equals("12")) {
                        return CheckResult.wrong(
                            "The program has problems with multiplication operation.");
                    }

                    output = main.execute("91 / 13").trim();
                    if (!output.equals("7")) {
                        return CheckResult.wrong(
                            "The program has problems with division operation.");
                    }

                    // testing all operators
                    main.execute(" a= 7 \n b =2");
                    output = main.execute("a * 4 / b - (3 - 1)").trim();
                    if (!output.equals("12")) {
                        return CheckResult.wrong(
                            "The program cannot correctly process several operations.");
                    }

                    // test of /exit
                    output = main.execute("/exit").trim().toLowerCase();
                    if (!output.startsWith("bye")) {
                        return CheckResult.wrong(
                            "Your program didn't print \"bye\" after entering \"/exit\".");
                    }

                    return new CheckResult(main.isFinished(),
                        "Your program should exit after entering \"/exit\".");
                }),

                new TestCase<String>().setDynamicTesting(() -> {
                    TestedProgram main = new TestedProgram(MainKt.class);

                    // testing priority of parentheses
                    main.start();

                    // expression from the example
                    String output = main.execute(
                        "7 + 3 * ((4 + 3) * 7 + 1) - 6 / (2 + 1)").trim();

                    if (!output.equals("155")) {
                        return CheckResult.wrong(
                            "The program cannot reproduce an example from the task.");
                    }

                    // test of /exit
                    output = main.execute("/exit").trim().toLowerCase();
                    if (!output.startsWith("bye")) {
                        return CheckResult.wrong(
                            "Your program didn't print \"bye\" after entering \"/exit\".");
                    }

                    return new CheckResult(main.isFinished(),
                        "Your program should exit after entering \"/exit\".");
                }),

                new TestCase<String>().setDynamicTesting(() -> {
                    TestedProgram main = new TestedProgram(MainKt.class);

                    // a set of negative tests
                    main.start();

                    // tests with unclosed brackets
                    String output = main.execute("8 * (2 + 3").trim().toLowerCase();
                    String output1 = main.execute("4 + 5)").trim().toLowerCase();
                    if (!output.startsWith("invalid") || !output1.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "The program could not handle an invalid expression.");
                    }

                    // sequence of * test
                    output = main.execute("2 ************ 2").trim().toLowerCase();
                    if (!output.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "A sequence of \"*\" should return \"Invalid expression\".");
                    }

                    // sequence of / test
                    output = main.execute("2 // 2").trim().toLowerCase();
                    if (!output.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "A sequence of \"/\" should return \"Invalid expression\".");
                    }

                    // test of /exit
                    output = main.execute("/exit").trim().toLowerCase();
                    if (!output.startsWith("bye")) {
                        return CheckResult.wrong(
                            "Your program didn't print \"bye\" after entering \"/exit\".");
                    }

                    return new CheckResult(main.isFinished(),
                        "Your program should exit after entering \"/exit\".");
                }),

                new TestCase<String>().setDynamicTesting(() -> {
                    TestedProgram main = new TestedProgram(MainKt.class);

                    // test suit for the 8th stage with very large numbers
                    main.start();

                    // testing basic assignment
                    String output = main.execute("n = 32000000000000000000");
                    if (output.length() != 0) {
                        return CheckResult.wrong(
                            "Unexpected reaction after assignment." +
                            "The program should not print anything in this case.");
                    }

                    // testing a big amount of numbers
                    output = main.execute(
                        "33000000000000000000 + 20000000000000000000 + 11000000000000000000 + " +
                        "49000000000000000000 - 32000000000000000000 - 9000000000000000000 " +
                        "+ 1000000000000000000 - 80000000000000000000 + 4000000000000000000 + 1").trim();
                    if (!output.equals("-2999999999999999999")) {
                        return CheckResult.wrong(
                            "The program cannot process addition " +
                            "and subtraction operations correctly.");
                    }

                    // the same with a variable
                    output = main.execute(
                        "33000000000000000000 + 20000000000000000000 + 11000000000000000000 + " +
                        "49000000000000000000 - n - 9000000000000000000 " +
                        "+ 1000000000000000000 - 80000000000000000000 + 4000000000000000000 + 1").trim();
                    if (!output.equals("-2999999999999999999")) {
                        return CheckResult.wrong(
                            "The program cannot process addition " +
                            "and subtraction operations correctly.");
                    }

                    // testing reassignment with big values
                    output = main.execute("c = n \nc = 2000000000000000000000");
                    if (output.length() != 0) {
                        return CheckResult.wrong(
                            "Unexpected reaction after assignment." +
                            "The program should not print anything in this case.");
                    }

                    // check value
                    output = main.execute("  c   ").trim();
                    if (!output.equals("2000000000000000000000")) {
                        return CheckResult.wrong(
                            "The variable stores not a correct value." +
                            "May be the program could not assign the value " +
                                "of one variable to another one.");
                    }

                    // the sum of the numbers is zero
                    output = main.execute(
                        "11000000000000000000 - 9000000000000000000 - " +
                        "c + 1998000000000000000000").trim();
                    if (!output.equals("0")) {
                        return CheckResult.wrong("The problem when sum is equal to 0 has occurred.");
                    }

                    // test of multiple operations
                    output = main.execute(
                        "5000000000000000000 --- 2000000000000000000 " +
                        "++++++ 4000000000000000000 -- 2000000000000000000 ---- 1000000000000000000").trim();
                    if (!output.equals("10000000000000000000")) {
                        return CheckResult.wrong("The program cannot process multiple " +
                            "operations with several operators.");
                    }

                    // testing all operators, with variables
                    main.execute(" a= 7000000000000000000 \n b =2000000000000000000");
                    output = main.execute("a * 4000000000000000000 / " +
                        "b - (3000000000000000000 - 1000000000000000000)").trim();
                    if (!output.equals("12000000000000000000")) {
                        return CheckResult.wrong(
                            "The program cannot correctly process several operations.");
                    }

                    // test of /exit
                    output = main.execute("/exit").trim().toLowerCase();
                    if (!output.startsWith("bye")) {
                        return CheckResult.wrong(
                            "Your program didn't print \"bye\" after entering \"/exit\".");
                    }

                    return new CheckResult(main.isFinished(),
                        "Your program should exit after entering \"/exit\".");
                })

            );
        }
    }
  learner_created: false
- name: src/calculator/PostfixConverter.kt
  visible: true
  text: |-
    package calculator

    object PostfixConverter {

        fun convert(expression: List<String>): List<String> {
            val stack = Stack<String>()

            var result = mutableListOf<String>()

            for (element in expression) {

                if (element.matches(Regex("""(\(-(\d+|[a-zA-Z]+)\))""")))
                //Add operands (numbers and variables witg minus in parenthesis) to the result (postfix notation) as they arrive.
                    result.add(element.replace("(","").replace(")",""))
                else if (element.matches(Regex("""\d+|[a-zA-Z]+""")))
                //Add operands (numbers and variables) to the result (postfix notation) as they arrive.
                    result.add(element)
                else {
                    //If the stack is empty or contains a left parenthesis on top, push the incoming operator on the stack.
                    //If the incoming operator has higher precedence than the top of the stack, push it on the stack.
                    //If the incoming element is a left parenthesis, push it on the stack.
                    if ((stack.isEmpty() || stack.top() == "(")
                            || (element in listOf("*", "/") && stack.top() in listOf("+", "-"))
                            || (element == "("))
                        stack.push(element)
                    else
                    //If the incoming operator has lower or equal precedence than or to the top of the stack,
                    //pop the stack and add operators to the result until you see an operator that has a smaller precedence
                    //or a left parenthesis on the top of the stack; then add the incoming operator to the stack.
                        if (element in listOf("+", "-", "*", "/") && !(element in listOf("*", "/") && stack.top() in listOf("+", "-"))) {
                            while (!stack.isEmpty() && stack.top() != "(" && !(element in listOf("*", "/") && stack.top() in listOf("+", "-")))
                                result.add(stack.pop())
                            stack.push(element)
                        } else
                        //If the incoming element is a right parenthesis, pop the stack and add operators to the result
                        //until you see a left parenthesis. Discard the pair of parentheses.
                            if (element == ")") {
                                while (!stack.isEmpty() && stack.top() != "(")
                                    stack.pop().takeIf { it in "+-*/" }.let { result.add(it!!) }
                                stack.pop()
                            }
                }
            }

            //At the end of the expression, pop the stack and add all operators to the result.
            while (!stack.isEmpty())
                result.add(stack.pop())

            return result
        }
    }

    fun main() {
        val nLine = "2*(-3)"
        val infixExpression = Regex("""(\(-(\d+|[a-zA-Z]+)\))|\+|-|\*|/|\(|\)|\d+|[a-zA-Z]+""").findAll(nLine).map { it.value }.filterNotNull().toList()
        println(infixExpression)
        println(PostfixConverter.convert(infixExpression).joinToString())
    }
  learner_created: true
- name: src/calculator/Calculator.kt
  visible: true
  text: |-
    package calculator

    class Calculator {
        private var variables = mutableMapOf<String, Int>()
        private var expression = listOf<Any>()
        private val stack = Stack<Int>()

        fun addVariable(key: String, value: Int) {
            variables[key] = value
        }

        fun addVariable(key: String, value: String) {
            variables[key] = getVariable(value)
        }

        fun getVariable(key: String): Int {
            val value = variables.get(key.replace("-", "")) ?: throw IllegalArgumentException("Unknown variable")
            return value * if (key[0] == '-') -1 else 1
        }

        private fun normalizeExpression(line: String): String {
            var nLine = line
            while (nLine.contains(Regex("""(\+|-)(\+|-)""")))
                nLine = nLine.replace("-+", "-")
                        .replace("+-", "-")
                        .replace("--", "+")
                        .replace("++", "+")
            nLine = Regex("""(^|\()\+""").replace(nLine, """$1""")
            nLine = Regex("""(^|\()-(\d+|[a-zA-Z]+)""").replace(nLine, """($0)""")
            return nLine
        }

        fun validateExpression(line: String) {
            var vLine = "(" + line + ")"
            do {
                val operation = Regex("""\(([^()])+\)""").findAll(vLine).toList()
                if (operation.isEmpty())
                    throw IllegalArgumentException("Invalid expression")

                for (i in operation) {
                    if (i.value.matches(Regex("""\(\+?\-?(\d|[a-zA-Z])+((\+|\-|\*|\/)(\d|[a-zA-Z])+)*\)""")))
                        vLine = vLine.replace(i.value, "exp")
                    else
                        throw IllegalArgumentException("Invalid expression")
                }
            } while (vLine != "exp")

        }

        fun setExpression(line: String) {
            val nLine = normalizeExpression(line)
            validateExpression(nLine)
            val infixExpression = Regex("""(\(-(\d+|[a-zA-Z]+)\))|\+|-|\*|/|\(|\)|\d+|[a-zA-Z]+""").findAll(nLine).map { it.value }.filterNotNull().toList()
            val postfixExpression = PostfixConverter.convert(infixExpression)
            expression = postfixExpression.map { OperationType.get(it) ?: it.toIntOrNull() ?: it as Any }
        }

        fun calculate(): Int {
            for (element in expression) when (element) {
                is String -> stack.push(getVariable(element))
                is Int -> stack.push(element)
                is OperationType -> stack.push(element.calc(b = stack.pop(), a = stack.pop()))
            }

            return stack.pop()
        }

    }
  learner_created: true
- name: src/calculator/ConsoleInterface.kt
  visible: true
  text: |
    package calculator

    import java.util.*

    object ConsoleInterface {
        private val calculator = Calculator()
        private val scanner = Scanner(System.`in`)
        var isWorking: Boolean = false

        private const val COMMAND = """/[a-zA-Z]+"""
        private const val VARIABLE = """[a-zA-Z]+=(([+-]?\d+)|[a-zA-Z]+)"""
        private const val EXPRESSION = """(\+|\-|\*|\/|\d|\(|\)|[a-zA-Z])+"""
        private const val START_EXPRESSION = """(\+|\-|\d|\(|[a-zA-Z])+.*"""

        private fun commandProcessing(line: String) {
            when (line) {
                "/help" -> {
                    println("The program calculates anything")
                }
                "/exit" -> {
                    println("Bye!")
                    isWorking = false
                }
                else -> println("Unknown command")
            }
        }

        private fun variableProcessing(line: String) {
            val key = Regex("""[a-zA-Z]+=""").find(line)!!.value.replace("=", "")
            val valueNumber = Regex("""=[+-]?\d+""").find(line)?.value?.replace("=", "")?.toInt()
            val valueOtherVariable = Regex("""=[a-zA-Z]+""").find(line)?.value?.replace("=", "")
            if (valueNumber != null)
                calculator.addVariable(key, valueNumber)
            else
                try {
                    calculator.addVariable(key, valueOtherVariable!!)
                } catch (e: IllegalArgumentException) {
                    println(e.message)
                }
        }

        private fun expressionProcessing(line: String) {
            try {
                calculator.setExpression(line)
                println(calculator.calculate())
            } catch (e: IllegalArgumentException) {
                println(e.message)
            }
        }

        fun run() {
            isWorking = true
            while (isWorking) {
                val line = scanner.nextLine().replace(" ", "")
                if (line == "")
                    continue
                else if (line.matches(Regex(COMMAND)))
                    commandProcessing(line)
                else if (line.matches(Regex(VARIABLE)))
                    variableProcessing(line)
                else expressionProcessing(line)
            }
        }
    }
  learner_created: true
- name: src/calculator/Stack.kt
  visible: true
  text: |-
    package calculator

    class Stack<T> {
        private val list = mutableListOf<T>()

        fun push(element: T) {
            list.add(element)
        }

        fun pop() = list.removeLast()

        fun top() = list.last()

        fun size() = list.size

        fun isEmpty() = list.isEmpty()

        fun clear() = list.clear()
    }
  learner_created: true
- name: src/calculator/OperationType.kt
  visible: true
  text: |-
    package calculator

    enum class OperationType(val operation: (a: Int, b: Int) -> Int) {
        PLUS({a: Int, b: Int -> a + b}),
        MINUS({a: Int, b: Int -> a - b}),
        MULTIPLY({a: Int, b: Int -> a * b}),
        DIVIDE({a: Int, b: Int -> a / b});

        companion object {
            fun get(c: String) = when (c) {
                "+" -> PLUS
                "-" -> MINUS
                "*" -> MULTIPLY
                "/" -> DIVIDE
                else -> null
            }
        }

        fun calc(a: Int, b: Int) = operation(a, b)
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/88/stages/493/implement
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/88/stages/493/implement">JetBrains
    Academy</a>
  time: Mon, 11 Jan 2021 18:58:07 UTC
record: -1
